{"version":3,"sources":["store/Actionst.ts","config/index.ts","utils/request.ts","utils/getUser.ts","store/Reducers.ts","store/GlobalState.tsx","components/Layout/Navigation/Navigation.tsx","components/Layout/Layout.tsx","components/Notify/Toast/Toast.tsx","components/Notify/Notify.tsx","utils/dispatchNotify.ts","components/Form/ForgotPasswordForm.tsx","pages/ForgotPasswordPage.tsx","components/Form/InputField/index.tsx","components/Form/LoginForm.tsx","pages/LoginPage.tsx","components/Profile/index.tsx","pages/ProfilePage.tsx","components/Form/RegisterForm.tsx","pages/RegisterPage.tsx","components/Form/ResetPasswordForm.tsx","pages/ResetPasswordPage.tsx","pages/VerifyPage/index.tsx","components/CustomRedirect.tsx","components/Chat/Message/Message.tsx","components/Chat/Chat.tsx","components/Chat/Rooms/Rooms.tsx","components/Chat/Users/Users.tsx","pages/ChatPage/ChatPage.tsx","pages/Routes.tsx","utils/prototypes.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTION","baseUrl","window","location","protocol","host","config","endpoints","login","register","me","verify","reset_password","sendNewVerificationLink","sendForgotPasswordEmail","avatar","user","id","logout","setNotify","payload","type","NOTIFY","setUser","SET_USER","request","a","url","method","headers","body","JSON","stringify","fetch","res","json","data","success","errors","msg","getUser","dispatch","notify","response","reducers","state","action","initialState","undefined","DataContext","createContext","GlobalState","children","useReducer","useEffect","then","Provider","value","Navigation","useContext","handleLogout","reload","userLinks","className","href","onClick","Layout","Toast","toast","deleteToast","expiresIn","useState","onExpireAnimate","setOnExpireAnimate","handleDelete","setTimeout","param","toCapitalize","Notify","toasts","setToasts","prev","filter","length","successToasts","map","v4","push","errorToasts","err","dispatchNotify","options","ForgotPasswordForm","ValidationSchema","Yup","shape","email","required","initialValues","onSubmit","values","validationSchema","isSubmitting","htmlFor","name","component","disabled","ForgotPasswordPage","InputField","props","useField","field","LoginForm","SignInValidationSchema","password","min","handleSubmit","to","LoginPage","ProfileContent","username","ProfilePage","split","pop","RegisterForm","SignUpValidationSchema","confirm_password","oneOf","RegisterPage","ResetPasswordForm","token","parse","search","setSuccess","ResetPasswordPage","VerifyPage","expired","setExpired","hadndleSendNewLinl","style","color","textDecoration","CustomRedirect","addNextQueryParam","redirectToNext","currentUrl","pathname","nextUrl","next","Array","nextQueryParam","Message","Chat","messages","sendMessage","users","isPrivateMessage","index","message","resetForm","autoComplete","Rooms","setRoom","setMessageToChannel","room","isActive","roomName","channelName","Users","setMessageToUser","newMessanges","setNewMessanges","getNewMessagesFromUser","newMessagesCount","messange","handleClick","ChatPage","userID","setUserID","setUsers","setMessages","newPrivateMessages","setNewPrivateMessages","setPrivateMessage","socketRef","useRef","current","io","on","emit","isPrivate","changeRoom","messageObj","Routes","exact","path","String","prototype","this","toUpperCase","slice","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04703b1b.chunk.js","sourcesContent":["import { INotify } from \"../interfaces/notify.interface\";\r\nimport { IUser } from \"../interfaces/user.interface\";\r\nimport { IActionState, IRootState } from \"./../interfaces/rootState.interface\";\r\nexport enum ACTION {\r\n  NOTIFY = \"NOTIFY\",\r\n  SET_USER = \"SET_USER\",\r\n}\r\n\r\nexport const setNotify = (\r\n  payload: IRootState[\"notify\"]\r\n): IActionState<INotify> => {\r\n  return { type: ACTION.NOTIFY, payload };\r\n};\r\n\r\nexport const setUser = (payload: IUser | null): IActionState<IUser | null> => {\r\n  return { type: ACTION.SET_USER, payload };\r\n};\r\n","export const baseUrl = `${window.location.protocol}//${window.location.host}/`;\r\n\r\nconst ENDPOINTS = {\r\n  login: baseUrl + \"api/auth/login\",\r\n  register: baseUrl + \"api/users\",\r\n  me: baseUrl + \"api/auth/me\",\r\n  verify: baseUrl + \"api/users/verify\",\r\n  reset_password: baseUrl + \"api/users/reset-password\",\r\n  sendNewVerificationLink: baseUrl + \"api/users/verify/new\",\r\n  sendForgotPasswordEmail: baseUrl + \"api/users/forgot-password\",\r\n  avatar: baseUrl + \"api/users/image\",\r\n  user: (id: string) => baseUrl + `api/users/${id}`,\r\n  logout: baseUrl + \"api/auth/logout\",\r\n};\r\n\r\nexport const config = {\r\n  endpoints: ENDPOINTS,\r\n};\r\n","import { IApiResponse, RequestProps } from \"../interfaces/api.interface\";\r\n\r\nexport const request = async ({\r\n  url,\r\n  method = \"GET\",\r\n  headers = {},\r\n  body,\r\n}: RequestProps): Promise<IApiResponse> => {\r\n  try {\r\n    if (headers) {\r\n      headers[\"Accept\"] = \"application/json, text/plain, */*\";\r\n      headers[\"Content-Type\"] = \"application/json\";\r\n    }\r\n    body = JSON.stringify(body);\r\n    const res = await fetch(url, {\r\n      method,\r\n      headers,\r\n      body,\r\n    });\r\n    const data: IApiResponse = await res.json();\r\n    return data;\r\n  } catch (error) {\r\n    return { success: false, errors: [{ msg: \"Something went wrong\" }] };\r\n  }\r\n};\r\n","import { dispatchNotify } from \"./dispatchNotify\";\r\nimport { IRootState } from \"./../interfaces/rootState.interface\";\r\nimport { config } from \"../config\";\r\nimport { IActionState } from \"../interfaces/rootState.interface\";\r\nimport { IUser } from \"../interfaces/user.interface\";\r\nimport { setNotify } from \"../store/Actionst\";\r\nimport { request } from \"./request\";\r\n\r\nexport const getUser = async (\r\n  { notify }: IRootState,\r\n  dispatch: React.Dispatch<IActionState<any>>\r\n): Promise<IUser | null> => {\r\n  try {\r\n    const response = await request({ url: config.endpoints.me });\r\n    return response.data.user;\r\n  } catch (error) {\r\n    dispatch(\r\n      setNotify({\r\n        ...notify,\r\n        errors: [{ msg: \"Authentication failed. Something went wrong\" }],\r\n      })\r\n    );\r\n    return null;\r\n  }\r\n};\r\n","import { IActionState, IRootState } from \"./../interfaces/rootState.interface\";\r\nimport { ACTION } from \"./Actionst\";\r\nexport const reducers = (\r\n  state: IRootState,\r\n  action: IActionState\r\n): IRootState => {\r\n  switch (action.type) {\r\n    case ACTION.NOTIFY:\r\n      return { ...state, notify: action.payload };\r\n    case ACTION.SET_USER:\r\n      return { ...state, user: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\nimport { IActionState, IRootState } from \"../interfaces/rootState.interface\";\r\nimport { getUser } from \"../utils/getUser\";\r\nimport { setUser } from \"./Actionst\";\r\nimport { reducers } from \"./Reducers\";\r\n\r\ninterface GlobalStateProps {}\r\n\r\nconst initialState: IRootState = {\r\n  notify: {\r\n    errors: [],\r\n    success: [],\r\n  },\r\n  user: undefined,\r\n};\r\n\r\nexport const DataContext = createContext<{\r\n  state: IRootState;\r\n  dispatch: React.Dispatch<IActionState>;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => {},\r\n});\r\n\r\nexport const GlobalState: React.FC<GlobalStateProps> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducers, initialState);\r\n  useEffect(() => {\r\n    getUser(state, dispatch).then((user) => {\r\n      return dispatch(setUser(user));\r\n    });\r\n  }, []);\r\n  return (\r\n    <DataContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { config } from \"../../../config\";\r\nimport { DataContext } from \"../../../store/GlobalState\";\r\nimport { request } from \"../../../utils/request\";\r\nimport \"./Navigation.scss\";\r\ninterface NavigationProps {}\r\n\r\nexport const Navigation: React.FC<NavigationProps> = ({}) => {\r\n  const { state } = useContext(DataContext);\r\n  const handleLogout = async () => {\r\n    await request({ url: config.endpoints.logout, method: \"POST\" });\r\n    window.location.reload();\r\n  };\r\n  const userLinks = state.user ? (\r\n    <div className=\"user-links\">\r\n      <a href=\"/profile\"> Profile </a>\r\n      <a onClick={handleLogout}> Logout </a>\r\n    </div>\r\n  ) : null;\r\n  return (\r\n    <nav>\r\n      <a className=\"logo\" href=\"/chat\">\r\n        CHAT\r\n      </a>\r\n      {userLinks}\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Navigation } from \"./Navigation/Navigation\";\r\n\r\ninterface LayoutProps {}\r\n\r\nexport const Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { IToast } from \"../../../interfaces/notify.interface\";\r\nimport \"./Toast.scss\";\r\ninterface ToastProps {\r\n  toast: IToast;\r\n  deleteToast: (id: string) => void;\r\n  expiresIn: number;\r\n}\r\n\r\nexport const Toast: React.FC<ToastProps> = ({\r\n  toast,\r\n  deleteToast,\r\n  expiresIn,\r\n}) => {\r\n  const [onExpireAnimate, setOnExpireAnimate] = useState<boolean>(false);\r\n  const handleDelete = () => {\r\n    setOnExpireAnimate(true);\r\n    setTimeout(() => {\r\n      deleteToast(toast.id);\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    setTimeout(handleDelete, expiresIn);\r\n  }, []);\r\n  return (\r\n    <div\r\n      className={`toast ${toast.type} ${\r\n        onExpireAnimate ? \"expiration-animate\" : null\r\n      } `}\r\n      onClick={handleDelete}\r\n    >\r\n      <p className=\"toast-title\">\r\n        {toast.param ? toast.param.toCapitalize() : toast.type.toCapitalize()}\r\n      </p>\r\n\r\n      <p>{toast.msg}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { INotify, IToast } from \"../../interfaces/notify.interface\";\r\nimport { ACTION, setNotify } from \"../../store/Actionst\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { v4 } from \"uuid\";\r\nimport { Toast } from \"./Toast/Toast\";\r\nimport \"./Notify.scss\";\r\ninterface NotifyProps {}\r\n\r\nexport const Notify: React.FC<NotifyProps> = ({}) => {\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const [toasts, setToasts] = useState<IToast[]>([]);\r\n  const { notify } = state;\r\n  const { errors, success } = notify;\r\n  const deleteToast = (id: string) => {\r\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\r\n  };\r\n  useEffect(() => {\r\n    if (!success.length && !errors.length) return;\r\n    const successToasts: IToast[] = [];\r\n    success.map((success) => {\r\n      const id = v4();\r\n      successToasts.push({ msg: success.msg, type: \"success\", id });\r\n    });\r\n    const errorToasts: IToast[] = [];\r\n    errors.map((err) => {\r\n      const id = v4();\r\n      errorToasts.push({\r\n        msg: err.msg,\r\n        type: \"error\",\r\n        id,\r\n        param: err.param || undefined,\r\n      });\r\n    });\r\n    setToasts((prev) => [...prev, ...successToasts, ...errorToasts]);\r\n    dispatch(setNotify({ errors: [], success: [] }));\r\n  }, [notify]);\r\n  return (\r\n    <div className=\"toast-container\">\r\n      {toasts.map((toast) => (\r\n        <Toast\r\n          key={toast.id}\r\n          toast={toast}\r\n          deleteToast={deleteToast}\r\n          expiresIn={5000}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { IApiResponse } from \"./../interfaces/api.interface\";\r\nimport { INotify } from \"./../interfaces/notify.interface\";\r\nimport { IActionState } from \"../interfaces/rootState.interface\";\r\nimport { setNotify } from \"../store/Actionst\";\r\n\r\ninterface IOptions {\r\n  errors: boolean;\r\n  success: boolean;\r\n}\r\n\r\nexport const dispatchNotify = (\r\n  dispatch: React.Dispatch<IActionState<any>>,\r\n  response: IApiResponse,\r\n  notify: INotify,\r\n  options: IOptions = {\r\n    errors: true,\r\n    success: true,\r\n  }\r\n) => {\r\n  if (!response.success) {\r\n    if (response.errors && options.errors) {\r\n      dispatch(setNotify({ ...notify, errors: response.errors }));\r\n    }\r\n    return;\r\n  }\r\n  if (response.msg && options.success) {\r\n    return dispatch(setNotify({ ...notify, success: [{ msg: response.msg }] }));\r\n  }\r\n};\r\n","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React, { useContext } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { config } from \"../../config\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { dispatchNotify } from \"../../utils/dispatchNotify\";\r\nimport { request } from \"../../utils/request\";\r\nimport \"./Form.scss\";\r\ninterface ForgotPasswordFormProps {}\r\n\r\nexport const ForgotPasswordForm: React.FC<ForgotPasswordFormProps> = ({}) => {\r\n  const { dispatch, state } = useContext(DataContext);\r\n  const { notify } = state;\r\n  const ValidationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Enter valid email\")\r\n      .required(\"Email is required\"),\r\n  });\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n        }}\r\n        onSubmit={async (values) => {\r\n          const res = await request({\r\n            url: config.endpoints.sendForgotPasswordEmail,\r\n            method: \"POST\",\r\n            body: values,\r\n          });\r\n          dispatchNotify(dispatch, res, notify);\r\n        }}\r\n        validationSchema={ValidationSchema}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <h2>Forget Password?</h2>\r\n            <div className=\"field-container\">\r\n              <label htmlFor=\"email\">Enter your email</label>\r\n              <ErrorMessage\r\n                name=\"email\"\r\n                component=\"div\"\r\n                className=\"error-message\"\r\n              />\r\n              <Field name=\"email\"></Field>\r\n            </div>\r\n            <button disabled={isSubmitting} type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ForgotPasswordForm } from \"../components/Form/ForgotPasswordForm\";\r\n\r\ninterface ForgotPasswordPageProps {}\r\n\r\nexport const ForgotPasswordPage: React.FC<ForgotPasswordPageProps> = ({}) => {\r\n  return <ForgotPasswordForm />;\r\n};\r\n","import { ErrorMessage, useField } from \"formik\";\r\nimport React, { InputHTMLAttributes } from \"react\";\r\nimport \"./InputField.scss\";\r\ninterface InputFieldProps extends InputHTMLAttributes<HTMLInputElement> {\r\n  name: string;\r\n}\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({ name, ...props }) => {\r\n  const [field, {}] = useField(name);\r\n  return (\r\n    <div className=\"field-container\">\r\n      <label htmlFor={name}>{name.toCapitalize()}</label>\r\n      <ErrorMessage name={name} component=\"div\" className=\"error-message\" />\r\n      <input {...field} {...props} name={name} />\r\n    </div>\r\n  );\r\n};\r\n","import { Field, Form, Formik, ErrorMessage } from \"formik\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport \"./Form.scss\";\r\nimport { request } from \"../../utils/request\";\r\nimport { config } from \"../../config\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { setUser } from \"../../store/Actionst\";\r\nimport { dispatchNotify } from \"../../utils/dispatchNotify\";\r\nimport { InputField } from \"./InputField\";\r\nimport { parse } from \"query-string\";\r\n\r\ninterface LoginFormProps {}\r\n\r\ninterface IValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormProps> = ({}) => {\r\n  const { dispatch, state } = useContext(DataContext);\r\n  const { notify } = state;\r\n  const SignInValidationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Enter valid email\")\r\n      .required(\"Email is required\"),\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(8, \"Password should be at least 8 charecters long\"),\r\n  });\r\n  const handleSubmit = async (values: IValues) => {\r\n    const res = await request({\r\n      url: config.endpoints.login,\r\n      method: \"POST\",\r\n      body: values,\r\n    });\r\n    dispatchNotify(dispatch, res, notify);\r\n    const { user } = res.data;\r\n    return dispatch(setUser(user));\r\n  };\r\n  const initialValues: IValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={SignInValidationSchema}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField name=\"email\" />\r\n            <InputField name=\"password\" type=\"password\" />\r\n            <button disabled={isSubmitting} type=\"submit\">\r\n              Sign In\r\n            </button>\r\n            <Link to=\"/forgot-password\" className=\"forgot-password\">\r\n              Forgot password?\r\n            </Link>\r\n            <div className=\"sign-in\">\r\n              Don't have an account? <Link to=\"/sign-up\">Sign up</Link>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { LoginForm } from \"../components/Form/LoginForm\";\r\n\r\ninterface LoginPageProps {}\r\n\r\nexport const LoginPage: React.FC<LoginPageProps> = ({}) => {\r\n  return (\r\n    <>\r\n      <LoginForm />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { IUser } from \"../../interfaces/user.interface\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport \"./Profile.scss\";\r\ninterface ProfileContentProps {\r\n  user: IUser;\r\n}\r\n\r\nexport const ProfileContent: React.FC<ProfileContentProps> = ({ user }) => {\r\n  return (\r\n    <>\r\n      <div className=\"profile-conteiner\">\r\n        <div className=\"user-info\">\r\n          <p>Username: {user.username}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router\";\r\nimport { ProfileContent } from \"../components/Profile/\";\r\nimport { IUser } from \"../interfaces/user.interface\";\r\nimport { DataContext } from \"../store/GlobalState\";\r\nimport { request } from \"../utils/request\";\r\nimport { parse } from \"query-string\";\r\nimport { config } from \"../config\";\r\ninterface ProfilePageProps {}\r\n\r\nexport const ProfilePage: React.FC<ProfilePageProps> = ({}) => {\r\n  const id = window.location.href.split(\"/\").pop();\r\n  const [user, setUser] = useState<IUser | null>(null);\r\n  useEffect(() => {\r\n    if (!id) return;\r\n    request({ url: config.endpoints.user(id) }).then((res) => {\r\n      setUser(res.data.user);\r\n    });\r\n  }, []);\r\n  if (!id) return null;\r\n  if (!user) return null;\r\n  return <ProfileContent user={user} />;\r\n};\r\n","import { Field, Form, Formik, ErrorMessage } from \"formik\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { config } from \"../../config\";\r\nimport { setUser } from \"../../store/Actionst\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { dispatchNotify } from \"../../utils/dispatchNotify\";\r\nimport { request } from \"../../utils/request\";\r\nimport \"./Form.scss\";\r\nimport { InputField } from \"./InputField\";\r\n\r\ninterface RegisterFormProps {}\r\n\r\ninterface IValues {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  confirm_password: string;\r\n}\r\n\r\nexport const RegisterForm: React.FC<RegisterFormProps> = ({}) => {\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { notify } = state;\r\n  const SignUpValidationSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"Username is required\"),\r\n    email: Yup.string()\r\n      .email(\"Enter valid email\")\r\n      .required(\"Email is required\"),\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(8, \"Password should be at least 8 charecters long\"),\r\n    confirm_password: Yup.string()\r\n      .required(\"Confirm password\")\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\r\n  });\r\n  const handleSubmit = async (values: IValues) => {\r\n    const res = await request({\r\n      url: config.endpoints.register,\r\n      method: \"POST\",\r\n      body: values,\r\n    });\r\n    dispatchNotify(dispatch, res, notify);\r\n    const { user } = res.data;\r\n    return dispatch(setUser(user));\r\n  };\r\n  const initialValues: IValues = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n  };\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={SignUpValidationSchema}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField name=\"username\" />\r\n            <InputField name=\"email\" />\r\n            <InputField name=\"password\" type=\"password\" />\r\n            <InputField name=\"confirm_password\" type=\"password\" />\r\n            <button disabled={isSubmitting} type=\"submit\">\r\n              Sign Up\r\n            </button>\r\n            <div className=\"sign-in\">\r\n              Have an account? <Link to=\"/sign-in\">Sign in</Link>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { RegisterForm } from \"../components/Form/RegisterForm\";\r\n\r\ninterface RegisterPageProps {}\r\n\r\nexport const RegisterPage: React.FC<RegisterPageProps> = ({}) => {\r\n  return (\r\n    <>\r\n      <RegisterForm />\r\n    </>\r\n  );\r\n};\r\n","import { Formik, Form, ErrorMessage, Field } from \"formik\";\r\nimport { parse } from \"query-string\";\r\nimport { config } from \"../../config/\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { setUser } from \"../../store/Actionst\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { dispatchNotify } from \"../../utils/dispatchNotify\";\r\nimport { request } from \"../../utils/request\";\r\nimport \"./Form.scss\";\r\nimport { Redirect } from \"react-router\";\r\ninterface ResetPasswordFormProps {}\r\n\r\ninterface IValues {\r\n  password: string;\r\n  confirm_password: string;\r\n}\r\n\r\nexport const ResetPasswordForm: React.FC<ResetPasswordFormProps> = ({}) => {\r\n  const { dispatch, state } = useContext(DataContext);\r\n  const { notify } = state;\r\n  const { token } = parse(window.location.search);\r\n  const [success, setSuccess] = useState<boolean>(false);\r\n  const ValidationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(8, \"Password should be at least 8 charecters long\"),\r\n    confirm_password: Yup.string()\r\n      .required(\"Confirm password\")\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\r\n  });\r\n\r\n  const handleSubmit = async (values: IValues) => {\r\n    const res = await request({\r\n      url: config.endpoints.reset_password,\r\n      method: \"PUT\",\r\n      body: { password: values.password, token },\r\n    });\r\n    dispatchNotify(dispatch, res, notify);\r\n    if (res.success) setSuccess(true);\r\n    return;\r\n  };\r\n  const initialValues: IValues = {\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n  };\r\n  if (success) return <Redirect to=\"/\" />;\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={ValidationSchema}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <div className=\"field-container\">\r\n              <label htmlFor=\"password\">Enter new password</label>\r\n              <ErrorMessage\r\n                name=\"password\"\r\n                component=\"div\"\r\n                className=\"error-message\"\r\n              />\r\n              <Field name=\"password\" type=\"password\"></Field>\r\n            </div>\r\n            <div className=\"field-container\">\r\n              <label htmlFor=\"confirm_password\">Confirm Password</label>\r\n              <ErrorMessage\r\n                name=\"confirm_password\"\r\n                component=\"div\"\r\n                className=\"error-message\"\r\n              />\r\n              <Field name=\"confirm_password\" type=\"password\"></Field>\r\n            </div>\r\n            <button disabled={isSubmitting} type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import { parse } from \"query-string\";\r\nimport React from \"react\";\r\nimport { ResetPasswordForm } from \"../components/Form/ResetPasswordForm\";\r\n\r\ninterface ResetPasswordPageProps {}\r\n\r\nexport const ResetPasswordPage: React.FC<ResetPasswordPageProps> = ({}) => {\r\n  return <ResetPasswordForm />;\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { request } from \"../../utils/request\";\r\nimport { config } from \"../../config/\";\r\nimport { dispatchNotify } from \"../../utils/dispatchNotify\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { parse } from \"query-string\";\r\nimport \"./VerifyPage.scss\";\r\ninterface VerifyProps {}\r\n\r\nexport const VerifyPage: React.FC<VerifyProps> = ({}) => {\r\n  const { dispatch, state } = useContext(DataContext);\r\n  const { notify } = state;\r\n  const { token, email } = parse(window.location.search);\r\n  const [expired, setExpired] = useState<boolean>(false);\r\n  const [success, setSuccess] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    const url = config.endpoints.verify;\r\n    request({ url, method: \"PUT\", body: { token } }).then((res) => {\r\n      dispatchNotify(dispatch, res, notify);\r\n      if (res.errors) setExpired(true);\r\n      if (res.success) setSuccess(true);\r\n    });\r\n  }, []);\r\n  const hadndleSendNewLinl = async () => {\r\n    request({\r\n      url: config.endpoints.sendNewVerificationLink,\r\n      method: \"POST\",\r\n      body: { email },\r\n    }).then((res) => dispatchNotify(dispatch, res, notify));\r\n  };\r\n  return (\r\n    <>\r\n      {expired && (\r\n        <p>\r\n          Your link has expired. Click{\" \"}\r\n          <a\r\n            onClick={hadndleSendNewLinl}\r\n            style={{ color: \"#393bcf\", textDecoration: \"underline\" }}\r\n          >\r\n            here\r\n          </a>{\" \"}\r\n          to send a new link{\" \"}\r\n        </p>\r\n      )}\r\n      {success && <p> You account has been verified </p>}\r\n    </>\r\n  );\r\n};\r\n","import { parse } from \"query-string\";\r\nimport React from \"react\";\r\nimport { Redirect } from \"react-router\";\r\n\r\ninterface CustomRedirectProps {\r\n  to: string;\r\n  addNextQueryParam?: boolean;\r\n  redirectToNext?: boolean;\r\n}\r\n\r\nexport const CustomRedirect: React.FC<CustomRedirectProps> = ({\r\n  to,\r\n  addNextQueryParam,\r\n  redirectToNext,\r\n}) => {\r\n  const currentUrl = window.location.pathname;\r\n  if (redirectToNext) {\r\n    let nextUrl: string;\r\n    let { next } = parse(window.location.search);\r\n    if (!next) {\r\n      return <Redirect to={`/`} />;\r\n    }\r\n    if (next instanceof Array) {\r\n      next = next[0];\r\n    }\r\n    nextUrl = next;\r\n    return <Redirect to={`${nextUrl}`} />;\r\n  }\r\n  const nextQueryParam = addNextQueryParam ? currentUrl : \"\";\r\n  return <Redirect to={`/${to}?next=${nextQueryParam}`} />;\r\n};\r\n","import React from \"react\";\r\nimport { IUser } from \"../../../interfaces/user.interface\";\r\nimport \"./Message.scss\";\r\n\r\ninterface MessageProps {\r\n  body: string;\r\n  user: IUser;\r\n}\r\n\r\nexport const Message: React.FC<MessageProps> = ({ body, user }) => {\r\n  return (\r\n    <div className=\"message-body\">\r\n      <p>\r\n        <a href={`/profile/${user.id}`}>{user.username}</a>: {body}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { IMessage, ISocketUser } from \"../../interfaces/socket-io.interfaces\";\r\nimport { InputField } from \"../Form/InputField\";\r\nimport \"./Chat.scss\";\r\nimport { Message } from \"./Message/Message\";\r\n\r\ninterface ChatProps {\r\n  isPrivateMessage: boolean;\r\n  room: string;\r\n  messages: IMessage[];\r\n  sendMessage: (message: string, isPrivate: boolean) => void;\r\n  users: ISocketUser[];\r\n}\r\n\r\nexport const Chat: React.FC<ChatProps> = ({\r\n  messages,\r\n  sendMessage,\r\n  users,\r\n  isPrivateMessage,\r\n}) => {\r\n  const initialValues = {\r\n    message: \"\",\r\n  };\r\n  return (\r\n    <div className=\"main-conteiner\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"messages-container\">\r\n          {messages.map(({ body, user }, index) => {\r\n            return <Message key={index} user={user} body={body} />;\r\n          })}\r\n        </div>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={async (values, { resetForm }) => {\r\n            sendMessage(values.message, isPrivateMessage);\r\n            return resetForm();\r\n          }}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              <InputField name=\"message\" autoComplete=\"off\" />\r\n              <button disabled={isSubmitting} type=\"submit\">\r\n                Send\r\n              </button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <div className=\"user-list\">\r\n        {users?.map((user) => (\r\n          <a href={`/profile/${user.user.id}`}>{user.user.username}</a>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./Rooms.scss\";\r\ninterface RoomsProps {\r\n  setRoom: (room: string) => void;\r\n  room: string;\r\n  setMessageToChannel: () => void;\r\n}\r\n\r\nexport const Rooms: React.FC<RoomsProps> = ({\r\n  setRoom,\r\n  setMessageToChannel,\r\n  room,\r\n}) => {\r\n  const CHANNELS = [\"general\", \"channel 1\", \"channel 2\", \"channel 3\"];\r\n  const handleClick = (channelName: string, index: number) => {\r\n    setMessageToChannel();\r\n    setRoom(channelName);\r\n  };\r\n  const isActive = (roomName: string): string => {\r\n    if (roomName === room) {\r\n      return \"active\";\r\n    }\r\n    return \"\";\r\n  };\r\n  return (\r\n    <div className=\"rooms-list\">\r\n      <h2>ROOMS</h2>\r\n      {CHANNELS.map((room, index) => {\r\n        return (\r\n          <a\r\n            key={index}\r\n            onClick={() => handleClick(room, index)}\r\n            className={isActive(room)}\r\n          >\r\n            {room.toCapitalize()}\r\n          </a>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport {\r\n  IMessage,\r\n  ISocketUser,\r\n} from \"../../../interfaces/socket-io.interfaces\";\r\nimport { DataContext } from \"../../../store/GlobalState\";\r\nimport \"./Users.scss\";\r\ninterface UsersProps {\r\n  users: ISocketUser[];\r\n  setRoom: (userID: string) => void;\r\n  setMessageToUser: () => void;\r\n  newMessanges: IMessage[];\r\n  setNewMessanges: React.Dispatch<React.SetStateAction<IMessage[]>>;\r\n  room: string;\r\n}\r\n\r\nexport const Users: React.FC<UsersProps> = ({\r\n  users,\r\n  setRoom,\r\n  setMessageToUser,\r\n  newMessanges,\r\n  setNewMessanges,\r\n  room,\r\n}) => {\r\n  const { state } = useContext(DataContext);\r\n  const handleClick = (id: string, username: string) => {\r\n    setMessageToUser();\r\n    setRoom(id);\r\n    setNewMessanges((prev) =>\r\n      prev.filter((messange) => messange.user.username !== username)\r\n    );\r\n  };\r\n  const getNewMessagesFromUser = (username: string) => {\r\n    const newMessagesCount = newMessanges.filter(\r\n      (message) => message.user.username === username\r\n    ).length;\r\n    if (!newMessagesCount) return;\r\n    return <i className=\"new-messages-icon\">{newMessagesCount}</i>;\r\n  };\r\n  const isActive = (roomName: string): string => {\r\n    if (roomName === room) {\r\n      return \"active\";\r\n    }\r\n    return \"\";\r\n  };\r\n  return (\r\n    <div className=\"users-container\">\r\n      <h2>USERS</h2>\r\n      {users.map(({ user, id }) => {\r\n        if (state.user?.username === user.username) {\r\n          return (\r\n            <p className={isActive(id)} key={id}>\r\n              {user.username}\r\n            </p>\r\n          );\r\n        }\r\n        return (\r\n          <a\r\n            className={isActive(id)}\r\n            onClick={() => handleClick(id, user.username)}\r\n            key={id}\r\n          >\r\n            {user.username} {getNewMessagesFromUser(user.username)}\r\n          </a>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\r\nimport { Chat } from \"../../components/Chat/Chat\";\r\nimport { Rooms } from \"../../components/Chat/Rooms/Rooms\";\r\nimport { Users } from \"../../components/Chat/Users/Users\";\r\nimport { baseUrl } from \"../../config\";\r\nimport { IMessage, ISocketUser } from \"../../interfaces/socket-io.interfaces\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport \"./ChatPage.scss\";\r\ninterface ChatPageProps {}\r\n\r\nexport const ChatPage: React.FC<ChatPageProps> = ({}) => {\r\n  const [room, setRoom] = useState(\"\");\r\n  const [userID, setUserID] = useState<string>();\r\n  const [users, setUsers] = useState<ISocketUser[]>([]);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n  const [newPrivateMessages, setNewPrivateMessages] = useState<IMessage[]>([]);\r\n  const [isPrivateMessage, setPrivateMessage] = useState<boolean>(false);\r\n  const { state } = useContext(DataContext);\r\n  const { user } = state;\r\n  const socketRef = useRef<Socket<DefaultEventsMap, DefaultEventsMap>>();\r\n  useEffect(() => {\r\n    socketRef.current = io(\"/\");\r\n    // GET USER ID\r\n    socketRef.current.on(\"your id\", (id) => {\r\n      setUserID(id);\r\n    });\r\n    // JOIN SERVER\r\n    socketRef.current.emit(\"join server\", {\r\n      user,\r\n    });\r\n    // JOIN ROOM\r\n    socketRef.current.emit(\"join room\", \"general\");\r\n    // RECIEVE MESSAGES FROM SERVER\r\n    socketRef.current.on(\"message\", (message: IMessage) => {\r\n      if (message.isPrivate && !(message.room === room))\r\n        setNewPrivateMessages((prev) => [...prev, message]);\r\n      setMessages((prev) => [...prev, message]);\r\n    });\r\n    // KEEP TRACK OF CURRENT USERS\r\n    socketRef.current.on(\"new user\", (users) => setUsers(users));\r\n\r\n    // ON JOINING ROOM\r\n    socketRef.current.on(\"joined\", (roomName) => {\r\n      setRoom(roomName);\r\n    });\r\n  }, [baseUrl]);\r\n  useEffect(() => {\r\n    setNewPrivateMessages((prev) =>\r\n      prev.filter((message) => message.room !== room)\r\n    );\r\n  }, [messages]);\r\n  const sendMessage = (message: string) => {\r\n    const messageObj = {\r\n      body: message,\r\n      user,\r\n      to: room,\r\n      id: userID,\r\n      isPrivate: isPrivateMessage,\r\n    };\r\n    return socketRef.current?.emit(\"send message\", messageObj);\r\n  };\r\n  const changeRoom = (room: string) => {\r\n    socketRef.current?.emit(\"join room\", room);\r\n  };\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <div className=\"channels-container\">\r\n        <Rooms\r\n          setMessageToChannel={() => setPrivateMessage(false)}\r\n          setRoom={changeRoom}\r\n          room={room}\r\n        />\r\n        <Users\r\n          newMessanges={newPrivateMessages}\r\n          setNewMessanges={setNewPrivateMessages}\r\n          setMessageToUser={() => setPrivateMessage(true)}\r\n          users={users}\r\n          setRoom={changeRoom}\r\n          room={room}\r\n        />\r\n      </div>\r\n      <Chat\r\n        isPrivateMessage={isPrivateMessage}\r\n        room={room}\r\n        messages={messages.filter((msg) => msg.room === room)}\r\n        sendMessage={sendMessage}\r\n        users={users.filter((user) => user.roomName === room)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { DataContext } from \"../store/GlobalState\";\r\nimport { ForgotPasswordPage } from \"./ForgotPasswordPage\";\r\nimport { LoginPage } from \"./LoginPage\";\r\nimport { ProfilePage } from \"./ProfilePage\";\r\nimport { RegisterPage } from \"./RegisterPage\";\r\nimport { ResetPasswordPage } from \"./ResetPasswordPage\";\r\nimport { VerifyPage } from \"./VerifyPage/\";\r\nimport { Chat } from \"../components/Chat/Chat\";\r\nimport { CustomRedirect } from \"../components/CustomRedirect\";\r\nimport { ChatPage } from \"./ChatPage/ChatPage\";\r\n\r\ninterface RoutesProps {}\r\n\r\nexport const Routes: React.FC<RoutesProps> = ({}) => {\r\n  const { state } = useContext(DataContext);\r\n  if (typeof state.user === \"undefined\") return null;\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {!!state.user ? (\r\n        <Switch>\r\n          {/* Routes when logged in */}\r\n          <Route exact path=\"/\">\r\n            <Redirect to={`/profile/${state.user.id}`} />\r\n          </Route>\r\n          <Route path=\"/verify\" component={VerifyPage} />\r\n          <Route exact path=\"/profile\">\r\n            <Redirect to={`/profile/${state.user.id}`} />\r\n          </Route>\r\n          <Route path=\"/profile/:id\" component={ProfilePage} />\r\n          <Route path=\"/chat\" component={ChatPage} />\r\n          <CustomRedirect to=\"/\" redirectToNext />\r\n        </Switch>\r\n      ) : (\r\n        <Switch>\r\n          {/* Routes when NOT logged in */}\r\n          <Route path=\"/sign-in\" component={LoginPage} />\r\n          <Route path=\"/verify\" component={VerifyPage} />\r\n          <Route path=\"/sign-up\" component={RegisterPage} />\r\n          <Route path=\"/forgot-password\" component={ForgotPasswordPage} />\r\n          <Route path=\"/reset-password\" component={ResetPasswordPage} />\r\n          <CustomRedirect to=\"sign-in\" addNextQueryParam />\r\n        </Switch>\r\n      )}\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","String.prototype.toCapitalize = function (this: string) {\r\n  return this[0].toUpperCase() + this.slice(1);\r\n};\r\n\r\nexport {};\r\n","import { Layout } from \"./components/Layout/Layout\";\nimport { Notify } from \"./components/Notify/Notify\";\nimport { Routes } from \"./pages/Routes\";\nimport { GlobalState } from \"./store/GlobalState\";\nimport \"./styles/global.scss\";\nimport \"./utils/prototypes\";\nfunction App() {\n  return (\n    <GlobalState>\n      <Layout>\n        <Notify />\n        <Routes />\n      </Layout>\n    </GlobalState>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}